console.log('3.5 操作符总结');
// 3.5 操作符总结
(() => {
// 3.5.1  一元操作符

// + 号放在时间格式前面会得到 时间戳
console.log(+new Date());   // 1655272555484
console.log(-new Date());   // -1655272555484
console.log(Number(new Date()));   // 1655272555484

/**
 * 后缀版与前缀版的区别：后缀版递增和递减在语句求值后才会发生改变。
 */
 let numh1 = 2;
 let numh2 = 20;
 let numh3 = numh1-- + numh2;
 let numh4 = numh1 + numh2;
 console.log('numh3', numh3);    // numh3 22     numh1的原始值2 + numh2   2 + 20
 console.log('numh4', numh4);    // numh4 21     numh1 - 1后的值1 + numg2 1 + 20

// 3.5.2  位操作符

/**
 * 用于数值的底层操作，也就是操作内存中表示数据的 比特(位)。
 * 含有操作: 按位非(~)、按位与(&)、按位或(|)、按位异或(^)、左移(<<)、有符号右移(>>)、无符号右移(>>>)
 */
/**
 * 计算十进制转换位二进制。手动: 倒基取余法
    2 | 18
    2 |  9 | 0
    2 |  4 | 1
    2 |  2 | 0
    2 |  1 | 0
    2 |  0 | 1
 */
/**
 * 负值，以一种称为二补数的二进制编码存储。一个数值的二补数通过如下3个步骤可以计算得到：
 * (1)、确定绝对值的二进制表示（如：对于 -18 来说，先确定 18 的二进制表示）；
 * (2)、找到数值的-补数，换句话说就是每个 0 都变成 1，每个 1 变成 0；
 * (3)、给结果加 1.
 */

//  位操作的速度快很多，因为操作的是在数值底层上完成的。(也许是提高性能的方法)

// 3.5.3 布尔操作符
/**
 * 含有操作: 逻辑非(!)、逻辑与(&&)、逻辑或(||)
 */

 console.log(!{});   // false
 console.log(![]);   // false
 
//  同时使用两个感叹号(!!)，相当于调用了转换函数 Boolean()。
console.log(!!'x');    // true
console.log(!!0);      // false
console.log(!!NaN);    // false

// 3.5.4 乘性操作符
/**
 * 含有操作: 1、乘法操作符(*)、1、除法操作符(/)、1、取模操作符(%)
 * 乘法、除法： 正正得正，负负得正，正负得负。如果超出则返回 Infinity、-Infinity。含有NaN返回NaN。
 * 取模：获取余数
 */

// 3.5.5 指数操作符
/**
 * Math.pow(x, y)或操作符(**)
 */

// 3.5.6 加性操作符
/**
 * 加性操作符，即加法和减法操作符。
 * 加法(+): 如果有一个操作数是字符串 ，对另一个操作数执行toString() 方法以获取字符串，undefined、null，则调用String() 函数，分别获取 "undefined"、 "null"。
 * 减法(-): 如果有任一操作数是字符串、布尔值、null、undefined，执行Number() 转换为数值，对象，则调用其valueOf() 方法，没有就用其toString()方法将得到的字符串转换为数值。
 */

// 3.5.7 关系操作符
/**
 * 包括小于(<)，大于(>)，小于等于(<=)，大于等于(>=)，用法和数学运算一致，这几个操作符都返回布尔值。
 * 在使用关系操作符比较两个字符串时 比较的是字符串对应的编码，而大写字母的编码小于小写字母的编码，会发生一个现象，通常大写字母的字符串 小于 小写字母的字符串。
 */

// 3.5.8 相等操作符
/**
 * 含有操作 相等(==)、不相等(!=)、全等(===)、不全等(!==)。
 * 
 * 相等、不相等：会执行类型转换进行对比、隐式转换
 * 如果有个操作室是对象，另一个操作数不是，则调用对象的valueOf() 方法取得其原始值，再进行比较。
 * 
 * 全等、不全等：不会执行类型转换进行对比
 */

console.log(NaN == NaN);    // false
console.log(NaN === NaN);   // false

console.log(null == undefined);     // true
console.log(null === undefined);    // false

// 3.5.9 条件操作符
/**
 * boolean ? true_value : false_value;
 * 又叫三元表达式
 */

// 3.5.10 赋值操作符
/**
 * 简单赋值: let num = 10;
 * 
 * 复合赋值：let num = 10; num += 10;
 * 乘后赋值(*=)、除后赋值(/=)、取模后赋值(%=)、加后赋值(+=)、减后赋值(-=)、左移后赋值(<<=)、右移后赋值(>>=)、无符号右移后赋值(>>>=)
 * 操作仅仅是简写，并不会提升性能
 */

// 3.5.11 逗号操作符
/**
 * 逗号操作符由逗号(,)表示，可以用来在一条语句中执行多个操作.。
 * 也可以使用逗号操作符来辅助赋值。在赋值时使用逗号操作符分隔值，最终会返回表达式中最后一个值。
 */
 let num = (5, 1, 4, 8, 0);
 console.log(num);   // 0

})();